---
- name: Update Proxmox VE Server
  hosts: proxmox
  become: true
  gather_facts: true
  serial: 1  # Update one server at a time for safety

  vars_files:
    - ../secrets.yml

  pre_tasks:
    - name: Display update information
      ansible.builtin.debug:
        msg:
          - "ðŸ”„ Starting Proxmox VE Update Process"
          - "Target host: {{ inventory_hostname }}"
          - "Current time: {{ ansible_date_time.iso8601 }}"
          - "Backup enabled: {{ proxmox_backup_before_update }}"
          - "Reboot after update: {{ proxmox_reboot_after_update }}"

    - name: Create backup directory
      ansible.builtin.file:
        path: "{{ backup_directory }}"
        state: directory
        mode: '0755'
      when: proxmox_backup_before_update | default(true)

    - name: Create log directory
      ansible.builtin.file:
        path: "{{ log_directory }}"
        state: directory
        mode: '0755'

    - name: Set update timestamp
      ansible.builtin.set_fact:
        update_timestamp: "{{ ansible_date_time.epoch }}"

  tasks:
    - name: Check current Proxmox version
      ansible.builtin.shell: pveversion
      register: proxmox_current_version
      changed_when: false

    - name: Display current version
      ansible.builtin.debug:
        msg: "Current Proxmox version: {{ proxmox_current_version.stdout }}"

    - name: Check system uptime before update
      ansible.builtin.shell: uptime
      register: system_uptime
      changed_when: false

    - name: Log update start
      ansible.builtin.lineinfile:
        path: "{{ log_directory }}/proxmox-update-{{ update_timestamp }}.log"
        line: "{{ ansible_date_time.iso8601 }} - Starting Proxmox update on {{ inventory_hostname }}"
        create: true
        mode: '0644'

    # Backup configuration before update
    - name: Create configuration backup
      block:
        - name: Backup Proxmox configuration
          ansible.builtin.shell: |
            tar -czf {{ backup_directory }}/proxmox-config-backup-{{ update_timestamp }}.tar.gz \
            /etc/pve/ \
            /etc/network/interfaces \
            /etc/hosts \
            /etc/hostname \
            /etc/resolv.conf \
            2>/dev/null || true
          register: backup_result

        - name: Log backup completion
          ansible.builtin.lineinfile:
            path: "{{ log_directory }}/proxmox-update-{{ update_timestamp }}.log"
            line: "{{ ansible_date_time.iso8601 }} - Configuration backup completed: {{ backup_directory }}/proxmox-config-backup-{{ update_timestamp }}.tar.gz"

      when: proxmox_backup_before_update | default(true)

    # Configure repositories based on subscription status
    - name: Configure Proxmox repositories
      block:
        - name: Remove enterprise repository (no subscription)
          ansible.builtin.file:
            path: /etc/apt/sources.list.d/pve-enterprise.list
            state: absent
          when: 
            - update_no_subscription | default(true)
            - not (update_enterprise | default(false))

        - name: Add no-subscription repository
          ansible.builtin.apt_repository:
            repo: "deb http://download.proxmox.com/debian/pve {{ ansible_distribution_release }} pve-no-subscription"
            filename: pve-no-subscription
            state: present
          when: update_no_subscription | default(true)

        - name: Add test repository
          ansible.builtin.apt_repository:
            repo: "deb http://download.proxmox.com/debian/pve {{ ansible_distribution_release }} pvetest"
            filename: pve-test
            state: present
          when: test_repositories | default(false)

    # System update process
    - name: Update package cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 0

    - name: Check for available updates
      ansible.builtin.shell: |
        apt list --upgradable 2>/dev/null | grep -v "WARNING" | wc -l
      register: available_updates
      changed_when: false

    - name: Display available updates
      ansible.builtin.debug:
        msg: "Available updates: {{ (available_updates.stdout | int) - 1 }} packages"

    - name: Log available updates
      ansible.builtin.lineinfile:
        path: "{{ log_directory }}/proxmox-update-{{ update_timestamp }}.log"
        line: "{{ ansible_date_time.iso8601 }} - Available updates: {{ (available_updates.stdout | int) - 1 }} packages"

    - name: Perform system upgrade
      ansible.builtin.apt:
        upgrade: dist
        autoclean: true
        autoremove: true
        force_apt_get: true
      register: upgrade_result
      async: "{{ proxmox_update_timeout | default(1800) }}"
      poll: 30
      when: (available_updates.stdout | int) > 1

    - name: Log upgrade completion
      ansible.builtin.lineinfile:
        path: "{{ log_directory }}/proxmox-update-{{ update_timestamp }}.log"
        line: "{{ ansible_date_time.iso8601 }} - System upgrade completed"
      when: upgrade_result is defined and upgrade_result.changed

    - name: Check if reboot is required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required

    - name: Display reboot status
      ansible.builtin.debug:
        msg: "Reboot required: {{ reboot_required.stat.exists }}"

  post_tasks:
    # Reboot if required and enabled
    - name: Reboot system if required
      block:
        - name: Log reboot start
          ansible.builtin.lineinfile:
            path: "{{ log_directory }}/proxmox-update-{{ update_timestamp }}.log"
            line: "{{ ansible_date_time.iso8601 }} - Starting system reboot"

        - name: Reboot the server
          ansible.builtin.reboot:
            reboot_timeout: "{{ proxmox_reboot_timeout | default(600) }}"
            connect_timeout: 5
            test_command: pveversion
          register: reboot_result

        - name: Log reboot completion
          ansible.builtin.lineinfile:
            path: "{{ log_directory }}/proxmox-update-{{ update_timestamp }}.log"
            line: "{{ ansible_date_time.iso8601 }} - System reboot completed"

      when: 
        - reboot_required.stat.exists or proxmox_reboot_after_update | default(false)
        - proxmox_wait_for_reboot | default(true)

    # Post-update verification
    - name: Wait for Proxmox services to start
      ansible.builtin.wait_for:
        port: 8006
        host: "{{ ansible_host }}"
        delay: 30
        timeout: 300
      delegate_to: localhost
      when: reboot_result is defined

    - name: Check Proxmox services status
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
      loop: "{{ services_to_check | default([]) }}"
      register: services_status

    - name: Verify Proxmox web interface
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}:8006"
        method: GET
        validate_certs: false
        timeout: 30
      register: web_interface_check
      ignore_errors: true
      delegate_to: localhost

    - name: Check updated Proxmox version
      ansible.builtin.shell: pveversion
      register: proxmox_new_version
      changed_when: false

    - name: Display version comparison
      ansible.builtin.debug:
        msg:
          - "Previous version: {{ proxmox_current_version.stdout }}"
          - "Current version: {{ proxmox_new_version.stdout }}"

    - name: Log update completion
      ansible.builtin.lineinfile:
        path: "{{ log_directory }}/proxmox-update-{{ update_timestamp }}.log"
        line: "{{ ansible_date_time.iso8601 }} - Proxmox update completed successfully"

    - name: Clean old backups
      ansible.builtin.find:
        paths: "{{ backup_directory }}"
        age: "{{ max_backup_age_days | default(30) }}d"
        patterns: "proxmox-config-backup-*.tar.gz"
      register: old_backups
      when: proxmox_backup_before_update | default(true)

    - name: Remove old backups
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_backups.files }}"
      when: 
        - proxmox_backup_before_update | default(true)
        - old_backups.files is defined

    # Final status report
    - name: Display update summary
      ansible.builtin.debug:
        msg:
          - "ðŸŽ¯ PROXMOX UPDATE COMPLETED"
          - "Host: {{ inventory_hostname }}"
          - "Completion time: {{ ansible_date_time.iso8601 }}"
          - "Previous version: {{ proxmox_current_version.stdout }}"
          - "Current version: {{ proxmox_new_version.stdout }}"
          - "Web interface: https://{{ ansible_host }}:8006"
          - "Log file: {{ log_directory }}/proxmox-update-{{ update_timestamp }}.log"
          - "{% if proxmox_backup_before_update %}Backup: {{ backup_directory }}/proxmox-config-backup-{{ update_timestamp }}.tar.gz{% endif %}"

  handlers:
    - name: restart pveproxy
      ansible.builtin.systemd:
        name: pveproxy
        state: restarted

    - name: restart pvedaemon
      ansible.builtin.systemd:
        name: pvedaemon
        state: restarted