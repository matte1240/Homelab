---
- name: Setup Proxmox Auto-Update System
  hosts: localhost
  become: true
  gather_facts: true

  vars:
    homelab_user: "{{ ansible_user_id }}"
    homelab_dir: "/home/{{ homelab_user }}/Homelab"
    scripts_dir: "{{ homelab_dir }}/ansible/scripts"
    auto_update_script: "{{ scripts_dir }}/proxmox-auto-update.sh"
    cron_config: "{{ scripts_dir }}/proxmox-auto-update.cron"
    log_dir: "/var/log/proxmox-auto-update"

  tasks:
    - name: Display setup information
      ansible.builtin.debug:
        msg:
          - "üîß Setup Proxmox Auto-Update System"
          - "User: {{ homelab_user }}"
          - "Homelab directory: {{ homelab_dir }}"
          - "Script: {{ auto_update_script }}"

    - name: Check if homelab directory exists
      ansible.builtin.stat:
        path: "{{ homelab_dir }}"
      register: homelab_dir_stat

    - name: Fail if homelab directory not found
      ansible.builtin.fail:
        msg: "Homelab directory {{ homelab_dir }} not found!"
      when: not homelab_dir_stat.stat.exists

    - name: Check if auto-update script exists
      ansible.builtin.stat:
        path: "{{ auto_update_script }}"
      register: script_stat

    - name: Fail if auto-update script not found
      ansible.builtin.fail:
        msg: "Auto-update script {{ auto_update_script }} not found!"
      when: not script_stat.stat.exists

    - name: Ensure auto-update script is executable
      ansible.builtin.file:
        path: "{{ auto_update_script }}"
        mode: '0755'
        owner: root
        group: root

    - name: Create log directory
      ansible.builtin.file:
        path: "{{ log_dir }}"
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Install required packages for notifications
      ansible.builtin.package:
        name:
          - mailutils  # For mail command
          - postfix    # For local mail delivery
        state: present

    - name: Configure postfix for local delivery
      ansible.builtin.debconf:
        name: postfix
        question: "{{ item.question }}"
        value: "{{ item.value }}"
        vtype: "{{ item.vtype }}"
      loop:
        - { question: "postfix/main_mailer_type", value: "Local only", vtype: "select" }
        - { question: "postfix/mailname", value: "{{ ansible_fqdn }}", vtype: "string" }
      notify: restart postfix

    - name: Setup cron job for automatic updates
      block:
        - name: Check if custom cron config exists
          ansible.builtin.stat:
            path: "{{ cron_config }}"
          register: cron_config_stat

        - name: Install cron configuration
          ansible.builtin.copy:
            src: "{{ cron_config }}"
            dest: "/etc/cron.d/proxmox-auto-update"
            mode: '0644'
            owner: root
            group: root
          when: cron_config_stat.stat.exists
          notify: restart cron

        - name: Create default cron configuration if custom not found
          ansible.builtin.copy:
            dest: "/etc/cron.d/proxmox-auto-update"
            mode: '0644'
            owner: root
            group: root
            content: |
              # Proxmox VE Auto-Update Configuration
              # Generated by Ansible - {{ ansible_date_time.iso8601 }}
              
              SHELL=/bin/bash
              PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
              
              # Daily check for updates at 01:00
              0 1 * * * root {{ auto_update_script }} >/dev/null 2>&1
          when: not cron_config_stat.stat.exists
          notify: restart cron

    - name: Create logrotate configuration for auto-update logs
      ansible.builtin.copy:
        dest: "/etc/logrotate.d/proxmox-auto-update"
        mode: '0644'
        owner: root
        group: root
        content: |
          {{ log_dir }}/*.log {
              weekly
              rotate 12
              compress
              delaycompress
              missingok
              notifempty
              create 644 root root
          }

    - name: Test auto-update script syntax
      ansible.builtin.shell:
        cmd: bash -n {{ auto_update_script }}
      register: syntax_check
      changed_when: false

    - name: Display syntax check result
      ansible.builtin.debug:
        msg: "‚úÖ Auto-update script syntax is valid"
      when: syntax_check.rc == 0

    - name: Test Proxmox connectivity
      ansible.builtin.shell:
        cmd: cd {{ homelab_dir }} && make proxmox-ping
      register: connectivity_test
      ignore_errors: true
      changed_when: false

    - name: Display connectivity test result
      ansible.builtin.debug:
        msg: |
          {% if connectivity_test.rc == 0 %}
          ‚úÖ Proxmox connectivity test successful
          {% else %}
          ‚ö†Ô∏è  Proxmox connectivity test failed - check configuration
          {% endif %}

    - name: Create test notification
      ansible.builtin.shell:
        cmd: echo "Test notification from Proxmox auto-update setup" | mail -s "Proxmox Auto-Update Setup Complete" root
      ignore_errors: true
      when: connectivity_test.rc == 0

    - name: Display setup summary
      ansible.builtin.debug:
        msg:
          - "üéØ PROXMOX AUTO-UPDATE SETUP COMPLETED"
          - ""
          - "üìÅ Files installed:"
          - "  ‚Ä¢ Script: {{ auto_update_script }}"
          - "  ‚Ä¢ Cron: /etc/cron.d/proxmox-auto-update"
          - "  ‚Ä¢ Logrotate: /etc/logrotate.d/proxmox-auto-update"
          - ""
          - "üìä Configuration:"
          - "  ‚Ä¢ Log directory: {{ log_dir }}"
          - "  ‚Ä¢ Daily checks at 01:00"
          - "  ‚Ä¢ Weekly maintenance on Mondays"
          - "  ‚Ä¢ Monthly full updates on 1st of month"
          - ""
          - "üîß Management commands:"
          - "  ‚Ä¢ Test manually: sudo {{ auto_update_script }}"
          - "  ‚Ä¢ View logs: sudo tail -f {{ log_dir }}/auto-update-*.log"
          - "  ‚Ä¢ Disable: sudo rm /etc/cron.d/proxmox-auto-update"
          - "  ‚Ä¢ Edit schedule: sudo nano /etc/cron.d/proxmox-auto-update"

  handlers:
    - name: restart postfix
      ansible.builtin.systemd:
        name: postfix
        state: restarted

    - name: restart cron
      ansible.builtin.systemd:
        name: cron
        state: restarted